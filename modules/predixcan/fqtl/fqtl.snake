#!/bin/env snakemake

### * routine
import sys
methoddir = sys.path[0]
maindir = re.search(r'.*genie/',methoddir).group()
sys.path.insert(1,maindir + "/library")
import md
from md import process_list
from os.path import basename


### * config load
vcf = config['--vcf']
expr = process_list(config['--expr'])
##covar = config['--covar']
pfix = config['pfix_fqtl']
oargs = config['--oargs']
pfactors = int(config['--npeer'])
bed = config['--bed']
bfile = config['--bfile']

### * scripts
peer_R = f"{methoddir}/peer.R"
prepare_R = f"{methoddir}/prepare.bed.covar.R"
prepare_covar_R = f"{methoddir}/prepare.covars.R"
plotcounts_R= f"{methoddir}/plotcounts.R"
calcResiduals_R = f"{methoddir}/residuals.sample.R"
createbed_R = f"{methoddir}/create.bed.R"
transpheno_R = f"{methoddir}/transpheno.R"
trans_summary_R = f"{methoddir}/find.tQTL.R"
transplot_R = f"{methoddir}/plot.transQTL.R"

### * default values
##pfactors = 40 ##from config
peer = list(range(0,pfactors+1))

### * outfiles
expr_dge = f"{pfix}_intermediatefiles/{{expr}}.dge"
peermodel=f"{pfix}_intermediatefiles/{{expr}}.peer.model.RDS"
peerfactors=f"{pfix}_intermediatefiles/{{expr}}.peer.factors.RDS"
bedout=f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.pcovar.residuals.bed"
bedformatted=f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.pcovar.residuals.formatted.bed.gz"
bedformatted_pre=f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.pcovar.residuals.formatted.bed"
##bedformatted=f"{pfix}_intermediatefiles/{{expr}}.formatted.bed.gz"
##bedformatted_pre=f"{pfix}_intermediatefiles/{{expr}}.formatted.bed"
covarout_pre=f"{pfix}_intermediatefiles/{{expr}}"
covarout=f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.pcovar"
covarout_part=f"{pfix}_intermediatefiles/{{{{expr}}}}.{{peer}}.pcovar"
covarout_residuals=f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.pcovar.residuals"
nominalout = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.nominalout"
nominalout_part = f"{pfix}_intermediatefiles/{{{{expr}}}}.{{peer}}.nominalout"
qtlcounts = f"{pfix}_finalfiles/{{expr}}.qtlcounts"
countplot = f"{pfix}_finalfiles/{{expr}}.qtlcounts.pdf"
transpheno = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.tpheno.{{gno}}"
transpheno_pre = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.tpheno"
transassoc = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.tgwas.{{gno}}.qassoc"
transassoc_prefix = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.tgwas.{{gno}}"
trans_summary = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.tgwas.{{gno}}.stat"
trans_summary_allgenes = f"{pfix}_intermediatefiles/{{expr}}.{{peer}}.allgenes"
trans_summary_allpeers = f"{pfix}_intermediatefiles/{{expr}}.allpeers"
transplot1_prefix = f"{pfix}_finalfiles/{{expr}}.transQTL"
transplot1 = f"{pfix}_finalfiles/{{expr}}.transQTL.fdr.pdf"

### * rules
### ** define local rules
localrules: fqtl_all, fqtl_prepareCovars, fqtl_createBed, fqtl_counthits, fqtl_plotcounts
### ** final files
localrules: fqtl_all, fqtl_collect_transStat_genewise, fqtl_collect_tranStat, fqtl_plot_transQTL
rule fqtl_all:
    input: ##expand(covarout_residuals, expr=expr,peer=peer)
           ##expand(transplot1, expr=expr)
           expand(countplot, expr=expr)
           ##expand(bedformatted, expr=expr, peer=peer)
           #expand(countplot, expr=expr),
           #expand(qtlcounts, expr=expr),
           #expand(nominalout, peer=peer, expr=expr),
           #expand(bedout, expr=expr),
           #expand(covarout,expr=expr,peer=peer)
### ** rule peer
rule fqtl_peer:
    input: expr = lambda wildcards: expr[wildcards.expr]
    output: model=peermodel, factors=peerfactors, dge = expr_dge
    params: script = "module unload R && module load R/3.3.1 && Rscript",
            scriptfile = peer_R, pfactors=pfactors,
    shell: "{params.script} {params.scriptfile} {input.expr} "
           "{output.model} {output.factors} {params.pfactors} {output.dge}"

### ** rule fqtl prepare Inputs
rule fqtl_prepareCovars:
    input: factors=peerfactors
    output: covar = expand(covarout_part, peer=peer)
    params: script = prepare_covar_R, covarout=covarout_pre, npeer = pfactors
    shell: "Rscript {params.script} {input.factors} {params.covarout} {params.npeer}"

### ** calculate residuals
rule fqtl_calculateResiduals:
    input: expr = expr_dge,
           covar = covarout
    output: covarout_residuals
    params: script = calcResiduals_R
    shell: "Rscript {params.script} {input.expr} {input.covar} {output}"

### ** create bed file
rule fqtl_createBed:
    input: expr=covarout_residuals, bed = bed
    output: bedout
    params: script = createbed_R
    shell: "Rscript {params.script} {input.expr} {input.bed} {output}"

### ** format bed file
rule fqtl_formatbed:
    input: bedout
    output: bedformatted
    params: scriptLoad = "module load bedtools htslib", bedpre=bedformatted_pre
    shell: "{params.scriptLoad} && "
           "head -1 {input} > {output}.header &&"
           "bedtools sort -i {input} > {output}.sorted.bed &&"
           "cat {output}.header {output}.sorted.bed > {params.bedpre} &&"
           "bgzip {params.bedpre} && tabix -p bed {output}"

### ** rule run QTL analysis
rule fqtl_runQTL:
    input: vcf = vcf, bed = bedformatted
    output: nominalout
    params: script="module load qtltools && QTLtools"
    shell: "{params.script} cis --vcf {input.vcf} --bed {input.bed} "
           " --nominal 0.01 --out {output} {oargs}"

### ** rule count eqtl hits
rule fqtl_counthits:
    input: expand(nominalout_part, peer=peer)
    output: qtlcounts
    run:
        for i in input:
            shell("wc -l {i} >> {output}")

### ** rule plotcounts
rule fqtl_plotcounts:
    input: qtlcounts
    output: countplot
    params: script = plotcounts_R
    shell: "Rscript {params.script} {input} {output}"

### ** rule prepare pheno for Trans GWAS
rule fqtl_preparetpheno:
    input: bedformatted
    output: dynamic(transpheno)
    params: script=transpheno_R , prefix= transpheno_pre
    shell: "Rscript {params.script} {input} {params.prefix}"

rule fqtl_transGWAS:
    input: pheno=transpheno,
           bed=bfile + ".bim"
    output: temp(transassoc)
    params: script = "module load plink/1.90 && plink ",
            prefix = transassoc_prefix,
            bfile = bfile
    shell: "{params.script} --bfile {params.bfile} --assoc "
           "--pheno {input.pheno} --out {params.prefix} --allow-no-sex "
           "--memory 2000"

rule fqtl_tranGWAS_filter:
    input: transassoc
    output: trans_summary
    params: script = trans_summary_R
    shell: "Rscript {params.script} {input} {output}"

rule fqtl_collect_transStat_genewise:
    input: dynamic(trans_summary)
    output: trans_summary_allgenes
    run:
        for i in input:
            shell("cat {i} >> {output}")

rule fqtl_collect_tranStat:
    input: expand(trans_summary_allgenes,expr=expr,peer=peer)
    output: trans_summary_allpeers
    run:
        for i in input:
            shell("cat {i} >> {output}")

rule fqtl_plot_transQTL:
    input: trans_summary_allpeers
    output: transplot1
    params: script = transplot_R, prefix=transplot1_prefix
    shell: "Rscript {params.script} {input} {params.prefix}"

### * org mode sepcific
### Local Variables:
### eval: (orgstruct-mode 1)
### orgstruct-heading-prefix-regexp: "### "
### End:

