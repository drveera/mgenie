#!/bin/env snakemake

import sys
methoddir = sys.path[0]
maindir = re.search(r'.*genie/',methoddir).group()
sys.path.insert(1,maindir + "/library")
import md
from md import process_list
from os.path import basename

##inputs
vcf = config['--vcf']
vcf = process_list(vcf)
ifilter = config['--ifilter']
print(ifilter)
ref = config['--ref']
if ref == "hrc":
    ref = f"{maindir}/resources/qc-dna/hrc/.."
elif ref == "1000g":
    ref = f"{maindir}/resources/qc-dna/1000g/1kg.eur.biallele.snps.maf0.01.nonAmbi.onlyRs.recode.vcf.gz"
pfix = config['pfix_qc-dna']

##load the script calls
bcftools = config['bcftools']
bgzip = config['bgzip']
tabix = config['tabix']
genotype_harmonizer = config['genotype_harmonizer']
Rscript = config['Rscript']
##

##outfiles
vcfout1 = f"{pfix}_intermediatefiles/{{vcf}}.filtered.vcf.gz"
vcfout1_tbi = f"{pfix}_intermediatefiles/{{vcf}}.filtered.vcf.gz.tbi"
vcfout1a = f"{pfix}_intermediatefiles/{{vcf}}.filtered.renamed.vcf.gz"
vcfout1a_prefix = f"{pfix}_intermediatefiles/{{vcf}}.filtered.renamed.vcf"
vcfout1a_tbi = f"{pfix}_intermediatefiles/{{vcf}}.filtered.renamed.vcf.gz.tbi"
if config['--renameINFO']:
    vcfout12 = vcfout1a
    vcfout12_tbi = vcfout1a_tbi
else:
    vcfout12 = vcfout1
    vcfout12_tbi = vcfout1_tbi
vcfout2_prefix = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose"
vcfout2_gen = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.gen"
vcfout2_gen_OK = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.gen.OK"
vcfout2_sample = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.sample"
vcfout2_sample2 = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.sample2"
vcfout2_vcf = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.vcf"
vcfout2_vcf_gz = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.vcf.gz"
vcfout2_vcf_index = f"{pfix}_intermediatefiles/{{vcf}}.harmonized.dose.vcf.gz.tbi"
vcflist = f"{pfix}_intermediatefiles/vcf.list"
mergedvcf = f"{pfix}_finalfiles/merged.vcf.gz"
mergedvcf_index = f"{pfix}_finalfiles/merged.vcf.gz.tbi"
mergedgds = f"{pfix}_finalfiles/merged.gds"
mergedgds_OK = f"{pfix}_finalfiles/OK.merged.gds.OK"
gdsannot = f"{pfix}_finalfiles/merged.gds.annot.RDS"
##new files
mergedgen = f"{pfix}_finalfiles/merged.gen"
mergedgen_OK = f"{pfix}_finalfiles/OK.merged.gen.OK"


##scripts
gh="/hpc/users/xrajagv01/installs/GenotypeHarmonizer-1.4.20-SNAPSHOT/GenotypeHarmonizer.sh"
listATGC_R=f"{methoddir}/list.ambiSNPs.R"
gen2gds_R=f"{methoddir}/gentogds.R"
mergegds_R=f"{methoddir}/mergegds.R"
sampleformat_R = f"{methoddir}/formatsample.R"
vcf2gds_R = f"{methoddir}/vcf2gds.R"
gdsannot_R = f"{methoddir}/gdsannot.fromgen.R"

localrules: qcdna_all, qcdna_sampleFormatting, qcdna_listVcf
rule qcdna_all:
    input: gdsannot

rule qcdna_filter1:
    input: vcf = lambda wildcards: vcf[wildcards.vcf]
    output: temp(vcfout1)
    params: ifilter = ifilter
    shell:
        "{bcftools} view -m2 -M2 -i '{params.ifilter}' -v snps -o {output} -O z {input.vcf} "

rule qcdna_renameINFO:
    input: vcfout1
    output: temp(vcfout1a)
    params: prefix = vcfout1a_prefix, script = "module load htslib && "
    shell: "zcat {input} | sed s/GT:GL:DS/GT:GP:DS/g - > {params.prefix} && "
           "{bgzip} {params.prefix}"

rule qcdna_tabix1:
    input: vcf = vcfout12
    output: index = temp(vcfout12_tbi)
    shell:
        "{tabix} {input.vcf}"

rule qcdna_harmonize:
    input: vcf=vcfout12, ref=ref, tbi=vcfout12_tbi
    output: gen=temp(vcfout2_gen), sample=temp(vcfout2_sample),OK=vcfout2_gen_OK
    params: script = gh, prefix=vcfout2_prefix
    shell: "{genotype_harmonizer} --input {input.vcf} "
           "--inputType VCF --output {params.prefix} "
           "--outputType GEN -id -ura --ref {input.ref}"
           " && touch {output.OK}"

rule qcdna_genconcat:
    input: expand(vcfout2_gen, vcf=vcf)
    output: gen = mergedgen, OK=mergedgen_OK
    run:
        for i in input:
            shell("cat {i} >> {output.gen}")
            shell("touch {output.OK}")

rule qcdna_gen2gds:
    input: gen=mergedgen,
           sample=expand(vcfout2_sample, vcf=vcf)
    output: gds = mergedgds, OK = mergedgds_OK
    params: script = gen2gds_R
    shell:
        "{Rscript} {params.script} {input.gen} {input.sample[0]} {output.gds} &&"
        "touch {output.OK}"

rule qcdna_gdsannot:
    input: gds = mergedgds,
           gen = mergedgen
    output: gdsannot
    params: script = gdsannot_R
    shell:
        "{Rscript} {params.script} {input.gds} {input.gen} {output}"
