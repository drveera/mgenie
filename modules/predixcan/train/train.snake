#!/bin/env snakemake

import sys
methoddir = sys.path[0]
maindir = re.search(r'.*genie/',methoddir).group()
sys.path.insert(1,maindir + "/library")
import md
from md import process_list
from os.path import basename

gds = config['--gds']
expr = config['--expr']
snpannot = config['--snpannot']
genes = config['--genes']
genes = process_list(genes) ##wildcard
pfix_train = config['pfix_train']

##scripts
gds_subset_R = f"{methoddir}/gds.sub.R"
trainmodel_R = f"{methoddir}/cvelastic.R"
db_R = f"{methoddir}/createdb.R"
mergefiles_R = f"{methoddir}/mergefiles.R"

##outfiles
subgds = f"{pfix_train}intermediatefiles/{{genes}}.gds"
subannot = f"{pfix_train}intermediatefiles/{{genes}}.annot.RDS"
geneweights = f"{pfix_train}intermediatefiles/{{genes}}.weights"
modelsummary = f"{pfix_train}intermediatefiles/{{genes}}.modelsummary"
allweights_list = f"{pfix_train}_finalfiles/snp.weights.list"
allmodels_list = f"{pfix_train}_finalfiles/model.summary.list"
allweights = f"{pfix_train}_finalfiles/snp.weights"
allmodels = f"{pfix_train}_finalfiles/model.summary"
db = f"{pfix_train}_finalfiles/model.db"

rule train_all:
    input: allweights, allmodels, db

rule train_subset_gds:
    input: genes = lambda wildcards: genes[wildcards.genes], snpannot=snpannot,
           gds = gds
    output: gds=temp(subgds),annot=temp(subannot)
    params: script = gds_subset_R
    shell: "Rscript {params.script} {input.gds} {input.snpannot} {input.genes} {output.gds} {output.annot} "

rule train_model:
    input: gds = subgds, genes = lambda wildcards: genes[wildcards.genes],
           snpannot = subannot, expr=expr
    output: geneweights = geneweights, modelsummary = modelsummary
    params: script = trainmodel_R
    shell: "Rscript {params.script} {input.gds} {input.snpannot} {input.genes} {input.expr} {output.geneweights}"
           " {output.modelsummary}"


rule train_genelist:
    input: wts=expand(geneweights, genes=genes),
           models = expand(modelsummary, genes=genes)
    output: wts = allweights_list, models = allmodels_list
    run:
        for i in input.wts:
            shell("ls {i}  >> {output.wts}")
        for i in input.models:
            shell("ls {i} >> {output.models}")

rule train_mergelist:
    input: wts = allweights_list,
           models = allmodels_list
    output: wts = allweights,
            models = allmodels
    params: script = mergefiles_R
    shell: "Rscript {params.script} {input.wts} {output.wts} && "
           "Rscript {params.script} {input.models} {output.models}"

rule train_db:
    input: wts = allweights, extra = allmodels
    output: db
    params: script = db_R
    shell: "Rscript {params.script} {input.wts} {input.extra} {output}"
